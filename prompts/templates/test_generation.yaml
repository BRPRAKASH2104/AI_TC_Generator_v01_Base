# =================================================================
# AI Test Case Generator - Test Generation Prompt Templates
# File: prompts/templates/test_generation.yaml
# Version: 1.0
# Last Updated: 2025-01-15
# =================================================================

metadata:
  version: "1.0"
  last_updated: "2025-01-15"
  maintainer: "Test Engineering Team"
  description: "Test generation prompt templates using YAML with simple variable substitution"

# Template configuration
template_config:
  variable_format: "{variable_name}"
  encoding: "utf-8"
  line_endings: "unix"

# Main test generation prompts
test_generation_prompts:
  
  # Default automotive prompt - extracted from current code
  automotive_default:
    name: "Default Automotive Test Generation"
    description: "Standard prompt for automotive requirement testing"
    category: "general"
    tags: ["automotive", "default", "table-based"]
    
    variables:
      required: 
        - heading
        - requirement_id  
        - table_str
        - row_count
        - voltage_precondition
      optional:
        - info_str
        - interface_str
      defaults:
        info_str: "None"
        interface_str: "None"
    
    template: |
      You are an expert automotive test engineer. Your task is to write granular test cases by decomposing the logic table within the PRIMARY REQUIREMENT, using all the provided context.
      
      --- CONTEXTUAL INFORMATION ---
      ## FEATURE HEADING:
      {heading}
      
      ## ADDITIONAL INFORMATION NOTES:
      {info_str}
      
      ## SYSTEM INTERFACE DICTIONARY (Inputs/Outputs/Variables):
      {interface_str}
      
      --- PRIMARY REQUIREMENT TO TEST ---
      **ID:** {requirement_id}
      **Logic Table Data:**
      {table_str}
      
      --- YOUR TASK ---
      1. Create one test case for EACH data row in the table. Ensure all {row_count} rows are covered.
      2. Use the context to understand terms. For example, use the System Interface Dictionary to understand what a signal like 'B_FWMSIG' means.
      3. The "summary_suffix" for each test case must be a short, descriptive title for that specific test row.
      4. The "action" must always be "{voltage_precondition}".
      5. The "data" must be a numbered list of all the "Input" column values for that row, formatted like "1) Set [Header Name] = [Value]".
      6. The "expected_result" must be a concise statement combining all "Output" column values for that row, formatted as "Verify [Header Name] = [Value]".
      7. Your entire response MUST be a single, valid JSON object with a single key: "test_cases".

    validation:
      min_row_count: 1
      max_row_count: 50
      required_context: ["heading", "requirement_id"]

  # Door control specialized prompt
  door_control_specialized:
    name: "Door Control System Specialized"
    description: "Specialized prompt for door control and locking systems"
    category: "specialized"
    tags: ["automotive", "door_control", "safety", "locking"]
    
    variables:
      required: 
        - heading
        - requirement_id
        - table_str
        - row_count
        - voltage_precondition
      optional:
        - info_str
        - interface_str
      defaults:
        info_str: "Focus on safety-critical door locking scenarios, vehicle speed thresholds for automatic locking, and door state sensor validation."
        interface_str: "Standard door control interfaces: B_DOOR_OPEN (door position sensor), B_VEHICLE_MOVING (motion sensor), B_SPEED_ABOVE_THRESHOLD (speed validation), B_DOOR_LOCK_CMD (lock actuator command)"
    
    template: |
      You are an expert automotive test engineer specializing in DOOR CONTROL SYSTEMS. Your task is to write comprehensive test cases by analyzing the door control logic table with emphasis on safety and security.
      
      --- DOOR CONTROL SYSTEM CONTEXT ---
      ## FEATURE HEADING: 
      {heading}
      
      ## DOOR CONTROL SPECIFIC INFORMATION:
      {info_str}
      
      ## DOOR SYSTEM INTERFACE DEFINITIONS:
      {interface_str}
      
      --- PRIMARY DOOR CONTROL REQUIREMENT ---
      **Requirement ID:** {requirement_id}
      **Door Control Logic Table:**
      {table_str}
      
      --- DOOR CONTROL TEST GENERATION REQUIREMENTS ---
      1. Generate exactly {row_count} test cases covering ALL door control logic scenarios.
      2. **SAFETY PRIORITY**: Focus on safety-critical combinations (door open + vehicle moving, speed thresholds, emergency scenarios).
      3. **SECURITY FOCUS**: Validate automatic locking behavior during vehicle motion and unlocking when stationary.
      4. **EDGE CASES**: Include boundary conditions for speed thresholds and sensor state transitions.
      5. **Test Naming**: Use descriptive titles like "Auto Lock During Motion Above Speed Threshold" or "Door Remains Unlocked When Stationary".
      6. **Preconditions**: Always start with "{voltage_precondition}" plus any door-specific setup requirements.
      7. **Input Validation**: Explicitly set all door sensor states, vehicle motion status, and speed conditions.
      8. **Expected Results**: Verify both door lock actuator commands AND safety interlock behavior.
      9. **Response Format**: Single JSON object with "test_cases" array containing all generated test cases.
      
      **SAFETY REQUIREMENTS TO CONSIDER:**
      - Doors must never unlock automatically while vehicle is in motion above safety threshold
      - Door sensors must be validated before any lock/unlock commands
      - Emergency scenarios must override normal locking behavior
      - Speed sensor failures must default to safe state (locked)

    validation:
      min_row_count: 1
      max_row_count: 20
      safety_critical: true
      requires_boundary_testing: true

  # Window control specialized prompt  
  window_control_specialized:
    name: "Window Control System Specialized"
    description: "Specialized prompt for window control with rain detection and safety features"
    category: "specialized"
    tags: ["automotive", "window_control", "rain_detection", "safety"]
    
    variables:
      required:
        - heading
        - requirement_id
        - table_str
        - row_count
        - voltage_precondition
      optional:
        - info_str
        - interface_str
      defaults:
        info_str: "Focus on automatic window control with rain override functionality, anti-pinch safety, and manual control priority."
        interface_str: "Standard window interfaces: B_MANUAL_WINDOW_UP (driver switch), B_RAIN_DETECTED (rain sensor), B_WINDOW_MOTOR_UP (motor control output)"
    
    template: |
      You are an expert automotive test engineer specializing in WINDOW CONTROL SYSTEMS with focus on rain detection, safety features, and user override capabilities.
      
      --- WINDOW CONTROL SYSTEM CONTEXT ---
      ## FEATURE HEADING: 
      {heading}
      
      ## WINDOW SYSTEM INFORMATION:
      {info_str}
      
      ## WINDOW CONTROL INTERFACES:
      {interface_str}
      
      --- PRIMARY WINDOW CONTROL REQUIREMENT ---
      **Requirement ID:** {requirement_id}
      **Window Control Logic Table:**
      {table_str}
      
      --- WINDOW CONTROL TEST REQUIREMENTS ---
      Generate {row_count} comprehensive test cases covering:
      
      1. **RAIN DETECTION PRIORITY**: Rain detection ALWAYS takes precedence over manual controls
      2. **MANUAL OVERRIDE**: Test manual window up/down commands in various weather conditions  
      3. **SAFETY FEATURES**: Validate anti-pinch detection and motor safety limits
      4. **AUTOMATIC OPERATION**: Test rain-triggered automatic window closure
      5. **SENSOR VALIDATION**: Verify rain sensor functionality and false positive handling
      6. **MOTOR CONTROL**: Ensure window motor responds correctly to all input combinations
      
      **Test Case Requirements:**
      - Precondition: "{voltage_precondition}" + window system initialization
      - Input combinations: Cover all logical combinations of manual control + rain detection
      - Expected behavior: Prioritize safety (rain closure) over convenience (manual control)
      - Edge cases: Rain sensor malfunction, motor obstruction, electrical failures
      - Response format: JSON object with "test_cases" array
      
      **SAFETY PRIORITIES:**
      1. Rain detection overrides manual down commands
      2. Manual up commands work regardless of rain status  
      3. Anti-pinch detection stops motor in all scenarios
      4. System defaults to safe state on sensor failures

    validation:
      min_row_count: 1
      max_row_count: 15
      safety_critical: true
      weather_dependent: true

# Prompt selection rules for automatic template choice
prompt_selection:
  # Rules based on heading content
  heading_keywords:
    door_control: 
      keywords: ["door", "lock", "locking", "DCS", "Door Control", "security"]
      template: "door_control_specialized"
    window_control:
      keywords: ["window", "rain", "WCS", "Window Control", "glass"]
      template: "window_control_specialized"
  
  # Rules based on requirement ID patterns
  requirement_id_patterns:
    door_patterns: 
      patterns: ["DCS", "DOOR", "LOCK", "SEC"]
      template: "door_control_specialized"
    window_patterns:
      patterns: ["WCS", "WINDOW", "RAIN", "GLASS"]
      template: "window_control_specialized"
  
  # Default fallback
  default_template: "automotive_default"
  
  # Model-specific preferences
  model_preferences:
    "llama3.1:8b":
      preferred: ["automotive_default", "door_control_specialized"]
      avoid: []
    "deepseek-coder-v2:16b":
      preferred: ["door_control_specialized", "window_control_specialized"]
      avoid: []